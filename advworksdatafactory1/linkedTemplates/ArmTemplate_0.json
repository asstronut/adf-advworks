{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "advworksdatafactory1"
		},
		"SQLServerOnPrem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLServerOnPrem'",
			"defaultValue": "Integrated Security=False;Data Source=AKBAR-ATTAMIMI;Initial Catalog=AdventureWorks2022;User ID=sa"
		},
		"AzureDataLakeStorageGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://advworkdatalakegen2.dfs.core.windows.net/"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://az-kv-advworks.vault.azure.net/"
		},
		"SHIR_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/af70eea1-a52b-4f7b-aa37-fd9a33aa5136/resourcegroups/azure-tutorial-de/providers/Microsoft.DataFactory/factories/adftutorialde/integrationruntimes/SHIR"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageGen2_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SHIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('SHIR_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextAdvWorks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetDataAdvWorks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesOrderHeaderCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SalesOrderHeader.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "String"
					},
					{
						"name": "RevisionNumber",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "String"
					},
					{
						"name": "DueDate",
						"type": "String"
					},
					{
						"name": "ShipDate",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "OnlineOrderFlag",
						"type": "String"
					},
					{
						"name": "SalesOrderNumber",
						"type": "String"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "String"
					},
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "SalesPersonID",
						"type": "String"
					},
					{
						"name": "TerritoryID",
						"type": "String"
					},
					{
						"name": "BillToAddressID",
						"type": "String"
					},
					{
						"name": "ShipToAddressID",
						"type": "String"
					},
					{
						"name": "ShipMethodID",
						"type": "String"
					},
					{
						"name": "CreditCardID",
						"type": "String"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "String"
					},
					{
						"name": "CurrencyRateID",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "String"
					},
					{
						"name": "TaxAmt",
						"type": "String"
					},
					{
						"name": "Freight",
						"type": "String"
					},
					{
						"name": "TotalDue",
						"type": "String"
					},
					{
						"name": "Comment",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					},
					{
						"name": "ModifiedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesPersonCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SalesPerson.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "BusinessEntityID",
						"type": "String"
					},
					{
						"name": "TerritoryID",
						"type": "String"
					},
					{
						"name": "SalesQuota",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "CommissionPct",
						"type": "String"
					},
					{
						"name": "SalesYTD",
						"type": "String"
					},
					{
						"name": "SalesLastYear",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					},
					{
						"name": "ModifiedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesPersonPerformance')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SalesPersonPerformance.csv",
						"fileSystem": "transformed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesTerritoryCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SalesTerritory.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TerritoryID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "CountryRegionCode",
						"type": "String"
					},
					{
						"name": "Group",
						"type": "String"
					},
					{
						"name": "SalesYTD",
						"type": "String"
					},
					{
						"name": "SalesLastYear",
						"type": "String"
					},
					{
						"name": "CostYTD",
						"type": "String"
					},
					{
						"name": "CostLastYear",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					},
					{
						"name": "ModifiedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLServerOnPrem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SQLServerOnPrem_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "dbpass"
					}
				},
				"connectVia": {
					"referenceName": "SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SHIR')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLServerTableList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLServerOnPrem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLServerOnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTableForEach')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLServerOnPrem",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaName": {
						"type": "string"
					},
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLServerOnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowQ1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesPersonCSV",
								"type": "DatasetReference"
							},
							"name": "SalesPersonCSV"
						},
						{
							"dataset": {
								"referenceName": "SalesTerritoryCSV",
								"type": "DatasetReference"
							},
							"name": "SalesTerritoryCSV"
						},
						{
							"dataset": {
								"referenceName": "SalesOrderHeaderCSV",
								"type": "DatasetReference"
							},
							"name": "SalesOrderHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SalesPersonPerformance",
								"type": "DatasetReference"
							},
							"name": "sinkQuery1"
						}
					],
					"transformations": [
						{
							"name": "LookupPersonTerritory"
						},
						{
							"name": "LookupPersonTerritorySales"
						},
						{
							"name": "filterYearOnlineFlag"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "PctSalesContributionToTerritory"
						},
						{
							"name": "selectColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          BusinessEntityID as short,",
						"          TerritoryID as short,",
						"          SalesQuota as double,",
						"          Bonus as double,",
						"          CommissionPct as double,",
						"          SalesYTD as double,",
						"          SalesLastYear as double,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SalesPersonCSV",
						"source(output(",
						"          TerritoryID as short,",
						"          Name as string,",
						"          CountryRegionCode as string,",
						"          Group as string,",
						"          SalesYTD as double,",
						"          SalesLastYear as double,",
						"          CostYTD as double,",
						"          CostLastYear as double,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SalesTerritoryCSV",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as short,",
						"          OrderDate as date,",
						"          DueDate as string,",
						"          ShipDate as string,",
						"          Status as short,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as short,",
						"          SalesPersonID as short,",
						"          TerritoryID as short,",
						"          BillToAddressID as short,",
						"          ShipToAddressID as short,",
						"          ShipMethodID as short,",
						"          CreditCardID as short,",
						"          CreditCardApprovalCode as string,",
						"          CurrencyRateID as short,",
						"          SubTotal as double,",
						"          TaxAmt as double,",
						"          Freight as double,",
						"          TotalDue as double,",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SalesOrderHeader",
						"SalesPersonCSV, SalesTerritoryCSV lookup(SalesPersonCSV@TerritoryID == SalesTerritoryCSV@TerritoryID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupPersonTerritory",
						"SalesOrderHeader, PctSalesContributionToTerritory lookup(SalesPersonID == BusinessEntityID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupPersonTerritorySales",
						"LookupPersonTerritorySales filter(year(OrderDate)==2013 && OnlineOrderFlag==toBoolean('0')) ~> filterYearOnlineFlag",
						"filterYearOnlineFlag aggregate(groupBy(BusinessEntityID,",
						"          Name,",
						"          Group,",
						"          SalesQuota,",
						"          SalesPersonCSV@SalesYTD,",
						"          SalesPersonCSV@SalesLastYear,",
						"          PctSalesContributionToTerritory),",
						"     NumberOfOrdersLastYear = count(SalesOrderID),",
						"          AverageOrderTotalLastYear = avg(TotalDue)) ~> aggregate1",
						"LookupPersonTerritory derive(PctSalesContributionToTerritory = SalesPersonCSV@SalesLastYear/SalesTerritoryCSV@SalesLastYear) ~> PctSalesContributionToTerritory",
						"aggregate1 select(mapColumn(",
						"          BusinessEntityID,",
						"          Name,",
						"          Group,",
						"          SalesQuota,",
						"          SalesYTD,",
						"          SalesLastYear,",
						"          PctSalesContributionToTerritory,",
						"          NumberOfOrdersLastYear,",
						"          AverageOrderTotalLastYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumns",
						"selectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkQuery1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SalesPersonCSV')]",
				"[concat(variables('factoryId'), '/datasets/SalesTerritoryCSV')]",
				"[concat(variables('factoryId'), '/datasets/SalesOrderHeaderCSV')]",
				"[concat(variables('factoryId'), '/datasets/SalesPersonPerformance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bulk Copy From Database')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Table List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from [AdventureWorks2022].INFORMATION_SCHEMA.TABLES where TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA='Sales';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLServerTableList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Table List",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Table List').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Export Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerTableForEach",
											"type": "DatasetReference",
											"parameters": {
												"schemaName": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"tableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedTextAdvWorks",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat(item().TABLE_NAME, '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLServerTableList')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTableForEach')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextAdvWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineTestDataflow1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowQ1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesPersonCSV": {},
									"SalesTerritoryCSV": {},
									"SalesOrderHeader": {},
									"sinkQuery1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowQ1')]"
			]
		}
	]
}